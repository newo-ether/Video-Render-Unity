// Kernel.compute

#pragma kernel KernelClear
#pragma kernel KernelGeometryProcessing
#pragma kernel KernelRender

#include "Rasterizer.hlsl"

// Uniform Variable
uint triangleIndex;

[numthreads(30,30,1)]
void KernelClear(uint3 id : SV_DispatchThreadID)
{
    ClearPixel(id.xy);
}

[numthreads(512,1,1)]
void KernelGeometryProcessing(uint3 id : SV_DispatchThreadID)
{
    if (id.x < GetTriangleCount())
    {
        WorldToNDCTransform(id.x);
        ClearTriangleNDCBuffer(id.x + GetTriangleCount());
        Clipping(id.x);
        PerspectiveDivision(id.x);
        PerspectiveDivision(id.x + GetTriangleCount());
        CalculateTriangleBound(id.x);
        CalculateTriangleBound(id.x + GetTriangleCount());
    }
}

[numthreads(30,30,1)]
void KernelRender(uint3 id : SV_DispatchThreadID)
{
    if (triangleIndex < GetClippedTriangleCount() && !IsEmptyTriangle(triangleIndex))
    {
        RasterizeTriangle(uint3(id.xy, triangleIndex));
    }
}
